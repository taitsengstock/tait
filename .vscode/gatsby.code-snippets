{
	"basicComponent": {
    "prefix": "bc",
    "body": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport { mobile, tablet } from '~styles/global'\n\nconst ${1:${TM_FILENAME_BASE}} = ({ className }) => {\n\treturn (\n\t\t<Wrap className={className}>\n\t\t\t\n\t\t</Wrap>\n\t)\n}\n\nconst Wrap = styled.div`\n\t\n`\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\tclassName: PropTypes.string\n}\n\nexport default ${1:${TM_FILENAME_BASE}}",
    "description": "Creates a stateless React component as a named function with PropTypes"
  },
	"basicComponentState": {
    "prefix": "bcs",
    "body": "import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport { mobile, tablet } from '~styles/global'\n\nconst ${1:${TM_FILENAME_BASE}} = ({ className }) => {\n\treturn (\n\t\t<Wrap className={className}>\n\t\t\t\n\t\t</Wrap>\n\t)\n}\n\nconst Wrap = styled.div`\n\t\n`\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\tclassName: PropTypes.string\n}\n\nexport default ${1:${TM_FILENAME_BASE}}",
    "description": "Creates a React component as a named function with State & PropTypes"
  },
	"basicComponentUseEffect": {
    "prefix": "bce",
    "body": "import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport { mobile, tablet } from '~styles/global'\n\nconst ${1:${TM_FILENAME_BASE}} = ({ className }) => {\n\treturn (\n\t\t<Wrap className={className}>\n\t\t\t\n\t\t</Wrap>\n\t)\n}\n\nconst Wrap = styled.div`\n\t\n`\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\tclassName: PropTypes.string\n}\n\nexport default ${1:${TM_FILENAME_BASE}}",
    "description": "Creates a React component as a named function with useEffect & PropTypes"
  },
	"basicComponentStateUseEffect": {
    "prefix": "bcse",
    "body": "import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport { mobile, tablet } from '~styles/global'\n\nconst ${1:${TM_FILENAME_BASE}} = ({ className }) => {\n\treturn (\n\t\t<Wrap className={className}>\n\t\t\t\n\t\t</Wrap>\n\t)\n}\n\nconst Wrap = styled.div`\n\t\n`\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\tclassName: PropTypes.string\n}\n\nexport default ${1:${TM_FILENAME_BASE}}",
    "description": "Creates a React component as a named function with State, useEffect & PropTypes"
  },
	"useEffect": {
    "prefix": "ue",
    "body": "useEffect(() => {\n\t$0\n}, [])",
    "description": "useEffect Skeleton"
  },
	"useState": {
    "prefix": "us",
    "body": "const [${1:state}, set${2:${1/(^.)|([A-Z](?=[a-z]))/${1:/upcase}${2:/upcase}/g}}] = useState()",
    "description": "useState Skeleton"
  },
	"useRef": {
    "prefix": "ur",
    "body": "const ${1:ref} = useRef()",
    "description": "useRef Skeleton"
  },
	"importComponent": {
    "prefix": "ic",
    "body": "import ${1:Component} from '~components/${1:Component}'",
    "description": "Imports a component"
  },
	"importUtility": {
    "prefix": "iu",
    "body": "import ${1:utility} from '~utils/${1:utility}'",
    "description": "Imports a utility"
  },
  "importModule": {
    "prefix": "im",
    "body": "import ${1:Module} from '${2:module}'",
    "description": "Imports a module"
  },
  "importModuleNamed": {
    "prefix": "imn",
    "body": "import { ${1:Module} } from '${2:module}'",
    "description": "Imports a named export from a module"
  },
  "disableNextLine": {
    "prefix": "disable",
    "body": "// eslint-disable-next-line",
    "description": "Disable ESLint / ignore the next line"
  },
	"cl": {
    "prefix": "cl",
    "body": "console.log(${0})",
    "description": "Disable ESLint / ignore the next line"
  },
	"var": {
    "prefix": "var",
    "body": "var(--${0})",
    "description": "Var Css"
  },
	"mobile": {
    "prefix": "mob",
    "body": "\\${mobile}{\n\t${0}\n}",
    "description": "Mobile media query"
  },
	"tablet": {
    "prefix": "tab",
    "body": "\\${tablet}{\n\t${0}\n}",
    "description": "Tablet media query"
  },
	"styled": {
    "prefix": "st",
    "body": "const ${1:Name} = styled.${2:div}`\n\t${0}\n`",
    "description": "Disable ESLint / ignore the next line"
  },
	"styledComponent": {
    "prefix": "stc",
    "body": "const ${1:Name} = styled(${2:Component})`\n\t${0}\n`",
    "description": "Disable ESLint / ignore the next line"
  },
  "sanityDocument": {
    "prefix": "sd",
    "body": "export default {\n\tname: '${1:${TM_FILENAME_BASE}}',\n\ttitle: '${2:Doc Title}',\n\ttype: 'document',\n\tfields: [\n\t\t{\n\t\t\tname: 'title',\n\t\t\ttitle: 'Title',\n\t\t\ttype: 'string',\n\t\t},\n\t\t{\n\t\t\tname: 'slug',\n\t\t\ttitle: 'Slug',\n\t\t\ttype: 'slug',\n\t\t\toptions: {\n\t\t\t\tsource: 'title',\n\t\t\t\tmaxLength: 96\n\t\t\t},\n\t\t\tvalidation: Rule => Rule.required()\n\t\t},\n\t\t$0\n\t],\n\tpreview: {\n\t\tselect: {\n\t\t\ttitle: 'title',\n\t\t\tmedia: 'content.seo.socialImage'\n\t\t}\n\t}\n}",
    "description": "Sanity Document"
  },
  "sanityObject": {
    "prefix": "so",
    "body": [
      "import { ${2:IoImage} } from 'react-icons/io5'",
      "\nexport default {",
        "\tname: '${1:${TM_FILENAME_BASE}}',",
        "\ttype: 'object',",
        "\ticon: ${2:IoImage},",
        "\tfields: [",
          "\t\t$0",
        "\t],",
        "\tpreview: {",
        "\t\tselect: {",
        "\t\t\ttitle: 'title',",
        "\t\t},",
        "\t\tprepare({ title }) {",
        "\t\t\treturn {",
        "\t\t\t\ttitle: title,",
        "\t\t\t}",
        "\t\t}",
        "\t}",
      "}"
    ],
    "description": "Sanity Object"
  },
  "sanityField": {
    "prefix": "sf",
    "body": "{\n\tname: '${1:name}',\n\ttype: '${2:type}',\n},",
    "description": "String field"
  },
  "sanityFieldFieldset": {
    "prefix": "sff",
    "body": "{\n\tname: '${1:name}',\n\ttype: '${2:type}',\n\tfieldset: '${3:fieldset}',\n},",
    "description": "String field with fieldset"
  },
  "imageSize": {
    "prefix": "imageSize",
    "body": "description: 'Suggested size ${1:1600}px Ã— ${2:900}px',",
    "description": "Format for image tip"
  },
  "imageWidth": {
    "prefix": "imageWidth",
    "body": "description: 'Suggested width ${1:1600}px',",
    "description": "Format for image tip"
  },
  "sanityDescription": {
    "prefix": "de",
    "body": "description: '$1',",
    "description": "Sanity Description"
  },
  "Sanity Basic Array": {
    "description": "Create a basic array field in Sanity",
    "prefix": "sa",
    "body": [
      "{",
      "\tname: '${1:name}',",
      "\ttype: 'array',",
      "\tof: [{ type: '${3:string}' }],",
      "},"
    ]
  },
  "Sanity Reference Field": {
    "description": "Create a basic reference field in Sanity",
    "prefix": "sr",
    "body": [
      "{",
      "\tname: '${1:name}',",
      "\ttitle: '${2:${1/(^.)|([A-Z](?=[a-z]))/${1:/upcase}${2:+ }${2:/downcase}/g}}',",
      "\ttype: 'reference',",
      "\tto: [{ type: '${3:author}' }],",
      "},"
    ]
  },
  "Sanity Preview with Select": {
    "description": "Add a basic preview with selection object in Sanity",
    "prefix": "sanityPreviewSelect",
    "body": [
      "preview: {",
      "\tselect: {",
      "\t\ttitle: '${1:title}',",
      "\t\tsubtitle: '${2:subtitle}',",
      "\t\tmedia: '${3:image}',",
      "\t},",
      "},"
    ]
  },
  "Sanity Select Object": {
    "description": "Add a basic selection object for preview in Sanity",
    "prefix": "sanitySelect",
    "body": [
      "\tselect: {",
      "\t\ttitle: '${1:title}',",
      "\t\tsubtitle: '${2:subtitle}',",
      "\t\tmedia: '${3:image}',",
      "\t},"
    ]
  },
  "Sanity Prepare Function": {
    "description": "Add a prepare function for preview in Sanity",
    "prefix": "sanityPrepare",
    "body": [
      "prepare({ title, subtitle, media }) {",
      "\treturn {",
      "\t\ttitle: `${1:${title\\}}`,",
      "\t\tsubtitle: `${2:${subtitle\\}}`,",
      "\t\tmedia,",
      "\t};",
      "},"
    ]
  },
  "Sanity Preview with Select and Prepare": {
    "description": "Add a preview with selection object and prepare function in Sanity",
    "prefix": "sanityPreviewSelectPrepare",
    "body": [
      "preview: {",
      "\tselect: {",
      "\t\ttitle: '${1:title}',",
      "\t\tsubtitle: '${2:subtitle}',",
      "\t\tmedia: '${3:image}',",
      "\t},",
      "\tprepare({ title, subtitle, media }) {",
      "\t\treturn {",
      "\t\t\ttitle: `${4:\\${title\\}}`,",
      "\t\t\tsubtitle: `${5:\\${subtitle\\}}`,",
      "\t\t\tmedia,",
      "\t\t};",
      "\t},",
      "},"
    ]
  },
  "Sanity Required": {
    "description": "Make a given field required",
    "prefix": "sRequired",
    "body": ["validation: Rule => Rule.required(),"]
  },
	
	"Sanity Hotspot": {
    "description": "Add hotspot to an image",
    "prefix": "hotspot",
    "body": [
      "options: {",
      "\thotspot: true",
      "},"
    ]
  },

	"propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeSymbol": {
    "prefix": "ptsm",
    "body": "PropTypes.symbol,",
    "description": "Symbol prop type"
  },
  "propTypeSymbolRequired": {
    "prefix": "ptsmr",
    "body": "PropTypes.symbol.isRequired,",
    "description": "Symbol prop type required"
  },
  "propTypeAny": {
    "prefix": "ptan",
    "body": "PropTypes.any,",
    "description": "Any prop type"
  },
  "propTypeAnyRequired": {
    "prefix": "ptanr",
    "body": "PropTypes.any.isRequired,",
    "description": "Any prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeObjectOfShape": {
    "prefix": "ptoos",
    "body": "PropTypes.objectOf(PropTypes.shape($0)),",
    "description": "An object whose keys are known ahead of time"
  },
  "propTypeObjectOfShapeRequired": {
    "prefix": "ptoosr",
    "body": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
    "description": "An object whose keys are known ahead of time required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
}